/**
 * @fileoverview gRPC-Web generated client stub for assets
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.26.1
// source: asset.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.assets = require('./asset_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.assets.AssetServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.assets.AssetServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.assets.CreateAssetRequest,
 *   !proto.assets.Asset>}
 */
const methodDescriptor_AssetService_CreateAsset = new grpc.web.MethodDescriptor(
  '/assets.AssetService/CreateAsset',
  grpc.web.MethodType.UNARY,
  proto.assets.CreateAssetRequest,
  proto.assets.Asset,
  /**
   * @param {!proto.assets.CreateAssetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.assets.Asset.deserializeBinary
);


/**
 * @param {!proto.assets.CreateAssetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.assets.Asset)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.assets.Asset>|undefined}
 *     The XHR Node Readable Stream
 */
proto.assets.AssetServiceClient.prototype.createAsset =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/assets.AssetService/CreateAsset',
      request,
      metadata || {},
      methodDescriptor_AssetService_CreateAsset,
      callback);
};


/**
 * @param {!proto.assets.CreateAssetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.assets.Asset>}
 *     Promise that resolves to the response
 */
proto.assets.AssetServicePromiseClient.prototype.createAsset =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/assets.AssetService/CreateAsset',
      request,
      metadata || {},
      methodDescriptor_AssetService_CreateAsset);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.assets.GetAssetRequest,
 *   !proto.assets.Asset>}
 */
const methodDescriptor_AssetService_GetAsset = new grpc.web.MethodDescriptor(
  '/assets.AssetService/GetAsset',
  grpc.web.MethodType.UNARY,
  proto.assets.GetAssetRequest,
  proto.assets.Asset,
  /**
   * @param {!proto.assets.GetAssetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.assets.Asset.deserializeBinary
);


/**
 * @param {!proto.assets.GetAssetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.assets.Asset)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.assets.Asset>|undefined}
 *     The XHR Node Readable Stream
 */
proto.assets.AssetServiceClient.prototype.getAsset =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/assets.AssetService/GetAsset',
      request,
      metadata || {},
      methodDescriptor_AssetService_GetAsset,
      callback);
};


/**
 * @param {!proto.assets.GetAssetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.assets.Asset>}
 *     Promise that resolves to the response
 */
proto.assets.AssetServicePromiseClient.prototype.getAsset =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/assets.AssetService/GetAsset',
      request,
      metadata || {},
      methodDescriptor_AssetService_GetAsset);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.assets.UpdateAssetRequest,
 *   !proto.assets.Asset>}
 */
const methodDescriptor_AssetService_UpdateAsset = new grpc.web.MethodDescriptor(
  '/assets.AssetService/UpdateAsset',
  grpc.web.MethodType.UNARY,
  proto.assets.UpdateAssetRequest,
  proto.assets.Asset,
  /**
   * @param {!proto.assets.UpdateAssetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.assets.Asset.deserializeBinary
);


/**
 * @param {!proto.assets.UpdateAssetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.assets.Asset)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.assets.Asset>|undefined}
 *     The XHR Node Readable Stream
 */
proto.assets.AssetServiceClient.prototype.updateAsset =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/assets.AssetService/UpdateAsset',
      request,
      metadata || {},
      methodDescriptor_AssetService_UpdateAsset,
      callback);
};


/**
 * @param {!proto.assets.UpdateAssetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.assets.Asset>}
 *     Promise that resolves to the response
 */
proto.assets.AssetServicePromiseClient.prototype.updateAsset =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/assets.AssetService/UpdateAsset',
      request,
      metadata || {},
      methodDescriptor_AssetService_UpdateAsset);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.assets.DeleteAssetRequest,
 *   !proto.assets.Empty>}
 */
const methodDescriptor_AssetService_DeleteAsset = new grpc.web.MethodDescriptor(
  '/assets.AssetService/DeleteAsset',
  grpc.web.MethodType.UNARY,
  proto.assets.DeleteAssetRequest,
  proto.assets.Empty,
  /**
   * @param {!proto.assets.DeleteAssetRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.assets.Empty.deserializeBinary
);


/**
 * @param {!proto.assets.DeleteAssetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.assets.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.assets.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.assets.AssetServiceClient.prototype.deleteAsset =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/assets.AssetService/DeleteAsset',
      request,
      metadata || {},
      methodDescriptor_AssetService_DeleteAsset,
      callback);
};


/**
 * @param {!proto.assets.DeleteAssetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.assets.Empty>}
 *     Promise that resolves to the response
 */
proto.assets.AssetServicePromiseClient.prototype.deleteAsset =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/assets.AssetService/DeleteAsset',
      request,
      metadata || {},
      methodDescriptor_AssetService_DeleteAsset);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.assets.Empty,
 *   !proto.assets.AssetList>}
 */
const methodDescriptor_AssetService_ListAssets = new grpc.web.MethodDescriptor(
  '/assets.AssetService/ListAssets',
  grpc.web.MethodType.UNARY,
  proto.assets.Empty,
  proto.assets.AssetList,
  /**
   * @param {!proto.assets.Empty} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.assets.AssetList.deserializeBinary
);


/**
 * @param {!proto.assets.Empty} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.assets.AssetList)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.assets.AssetList>|undefined}
 *     The XHR Node Readable Stream
 */
proto.assets.AssetServiceClient.prototype.listAssets =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/assets.AssetService/ListAssets',
      request,
      metadata || {},
      methodDescriptor_AssetService_ListAssets,
      callback);
};


/**
 * @param {!proto.assets.Empty} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.assets.AssetList>}
 *     Promise that resolves to the response
 */
proto.assets.AssetServicePromiseClient.prototype.listAssets =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/assets.AssetService/ListAssets',
      request,
      metadata || {},
      methodDescriptor_AssetService_ListAssets);
};


module.exports = proto.assets;

